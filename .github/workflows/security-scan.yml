name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans weekly
    - cron: '0 2 * * 1'

jobs:
  # Dependency vulnerability scanning
  dependency-check:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd apps/api && npm ci
        cd ../web && npm ci

    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate
        cd apps/api && npm audit --audit-level=moderate
        cd ../web && npm audit --audit-level=moderate

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Code security analysis
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'typescript']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker images
      run: |
        docker build -t fixlog-api ./apps/api
        docker build -t fixlog-web ./apps/web

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'fixlog-api:latest'
        format: 'sarif'
        output: 'trivy-results-api.sarif'

    - name: Run Trivy vulnerability scanner for web
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'fixlog-web:latest'
        format: 'sarif'
        output: 'trivy-results-web.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results-api.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results-web.sarif'

  # SAST (Static Application Security Testing)
  sast-scan:
    name: SAST Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
        output-format: sarif
        output-file: semgrep-results.sarif

    - name: Upload Semgrep results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'semgrep-results.sarif'

  # Secrets scanning
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        args: --only-verified --format sarif --output trufflehog-results.sarif

    - name: Upload TruffleHog results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trufflehog-results.sarif'

  # License compliance check
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd apps/api && npm ci
        cd ../web && npm ci

    - name: Run license checker
      run: |
        npx license-checker --summary --onlyAllow "MIT;ISC;Apache-2.0;BSD-2-Clause;BSD-3-Clause;CC0-1.0;Unlicense"
        cd apps/api && npx license-checker --summary --onlyAllow "MIT;ISC;Apache-2.0;BSD-2-Clause;BSD-3-Clause;CC0-1.0;Unlicense"
        cd ../web && npx license-checker --summary --onlyAllow "MIT;ISC;Apache-2.0;BSD-2-Clause;BSD-3-Clause;CC0-1.0;Unlicense"

  # Security policy check
  security-policy:
    name: Security Policy Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for security policy
      run: |
        if [ ! -f "SECURITY.md" ]; then
          echo "❌ SECURITY.md file is missing"
          exit 1
        fi
        echo "✅ SECURITY.md file found"

    - name: Validate security policy format
      run: |
        if ! grep -q "## Reporting a Vulnerability" SECURITY.md; then
          echo "❌ SECURITY.md missing vulnerability reporting section"
          exit 1
        fi
        echo "✅ SECURITY.md format is valid"

  # Security headers test
  security-headers:
    name: Security Headers Test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Start application
      run: |
        docker-compose up -d
        sleep 30

    - name: Test security headers
      run: |
        curl -I http://localhost:3000 | grep -E "(X-Content-Type-Options|X-Frame-Options|X-XSS-Protection|Strict-Transport-Security)"
        curl -I http://localhost:3001 | grep -E "(X-Content-Type-Options|X-Frame-Options|X-XSS-Protection|Strict-Transport-Security)"

    - name: Cleanup
      if: always()
      run: docker-compose down

  # Security report generation
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-check, codeql-analysis, container-scan, sast-scan, secrets-scan, license-check, security-policy]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate security report
      run: |
        echo "# Security Scan Report" > security-report.md
        echo "Generated on: $(date)" >> security-report.md
        echo "" >> security-report.md
        echo "## Summary" >> security-report.md
        echo "- Dependency vulnerabilities: ${{ needs.dependency-check.result }}" >> security-report.md
        echo "- CodeQL analysis: ${{ needs.codeql-analysis.result }}" >> security-report.md
        echo "- Container security: ${{ needs.container-scan.result }}" >> security-report.md
        echo "- SAST scan: ${{ needs.sast-scan.result }}" >> security-report.md
        echo "- Secrets detection: ${{ needs.secrets-scan.result }}" >> security-report.md
        echo "- License compliance: ${{ needs.license-check.result }}" >> security-report.md
        echo "- Security policy: ${{ needs.security-policy.result }}" >> security-report.md

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md
