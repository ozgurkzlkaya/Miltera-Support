version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: miltera-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: fixlog
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - fixlog-network

  redis:
    image: redis:7.2.9-alpine
    container_name: miltera-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes: 
      - redis_data:/var/lib/redis/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - fixlog-network

  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: miltera-api
    ports:
      - "3001:3001"
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/fixlog
      REDIS_URL: redis://redis:6379
      NODE_ENV: development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - fixlog-network

  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: miltera-web
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NODE_ENV: development
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - fixlog-network

volumes:
  postgres_data:
  redis_data:

networks:
  fixlog-network:
    driver: bridge